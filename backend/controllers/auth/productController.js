const { Product } = require("../../models").db;
const { Category } = require("../../models").db;
const multer = require('multer');
const cloudinary = require('../../utils/cloudinaryConfig');
const path = require('path');
//const fs = require('fs');

// Multer Middleware
const storage = multer.diskStorage({
  // destination: function (req, file, cb){
  // cb(null, file.originalname);
  // },
  filename: function (req, file, cb){
    cb(null, Date.now() + '-' + file.originalname);
  }
});
const upload = multer({ storage: storage}).any();

//1. Create Product

const addProduct = async (req, res) => {
  try {

    console.log('Request Body:', req.body);
    console.log('Uploaded Files:', req.files);
    if (!req.body.title || !req.body.categoryId || !req.files || req.files.length === 0) {
      return res
        .status(400)
        .send({ message: "Title, categoryId, and at least one image is required" });
    }
    // check if req.files is an array and contains at least one file
    if (!Array.isArray(req.files) || req.files.length === 0){
      return res.send(400).send({ message: "No files uploaded"});
    }



    const category = await Category.findByPk(req.body.categoryId);
    if (!category) {
      return res.status(404).send({ message: "Category not found" });
    }

    // Log the file path to verify
   // console.log("File Path:", req.file.path);




    // Upload images to Cloudinary
    const imageUploadPromises = req.files.map(async (file) => {
      console.log('File:', file);
      const result = await cloudinary.uploader.upload(file.path, {folder: "product_images"});
      return result.secure_url;
    });


    //wait for all images to get uploaded
    const uploadedImages = await Promise.all(imageUploadPromises);



   //const imagePath = path.join(__dirname, '..', '..' , 'images', 'product_image', req.file.filename);//file path generated by multer
    // // Save the image to the images directory
    // // You may want to handle unique filenames to avoid conflicts
    // fs.writeFile(imagePath, req.file.buffer, (err) => {
    //   if (err) {
    //     console.error("Error saving image:", err);
    //     return res.status(500).send("Internal server error");
    //   }
    // });

    // read image data from the uploaded file
    //const imageData = req.file.buffer;

    let info = {
      title: req.body.title,
      description: req.body.description,
      image: JSON.stringify(uploadedImages),
      // price: req.body.price,
      price: parseFloat(req.body.price.replace(/[^\d.]/g, "")), // Extract numerical value
      type: req.body.type,
      size: JSON.parse(req.body.size),
      color: JSON.parse(req.body.color),
      quantity: req.body.quantity,
      categoryId: req.body.categoryId,
    };

    const product = await Product.create(info);
    res.status(200).send(product); // Use 200 for successful creation
  } catch (error) {
    console.error("Error adding product:", error);
    res.status(500).send("Internal server error");
  }
};

//2. get all products

const getAllProducts = async (req, res) => {
  try {
    const products = await Product.findAll({});
    res.status(200).json(products);
  } catch (error) {
    console.error("Error fetching products:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};


//3. get single product

const getOneProduct = async (req, res) => {
  try {
    const id = req.params.id;
    const product = await Product.findOne({ where: { id: id } });

    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }
    res.status(200).json(product);
  } catch (error) {
    console.error("Error fetching product:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

// 4. update product
const updateProduct = async (req, res) => {
  try {
    const id = req.params.id;
    await Product.update(req.body, { where: { id: id } });
    const updatedProduct = await Product.findOne({ where: { id: id } });
    res.status(200).send(updatedProduct);
  } catch (error) {
    console.error("Error updating product:", error);
    res.status(500).send("Internal server error");
  }
};


//5. delete product by id

const deleteProduct = async (req, res) => {
  try{
    let id = req.params.id

    await Product.destroy({where: { id: id}})

    res.status(200).send('Product is deleted!');
  } catch (error) {
    console.error("Error deleting product:", error);
    res.status(500).send("Internal server error");
  }

};




module.exports = {
  upload,
  addProduct,
  getAllProducts,
  getOneProduct,
  updateProduct,
  deleteProduct
};
